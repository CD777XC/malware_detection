# Importing libraries
import numpy as np
import pandas as pd

import os
from dotenv import load_dotenv

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.inspection import permutation_importance

import time

####################  Data Preprocessing  ####################

start = time.time()

# Loading .env variables
print(f'''{5*"#"} Loading data from environment variables... ⏳ {5*"#"}''')
load_dotenv(dotenv_path='../.env')

# Assigning dataset to dataframe
data = pd.read_csv(os.getenv("DATA"), sep="|")

# Defining X and y on a copy of data
X = data.drop(columns="legitimate").copy()
y = data['legitimate'].copy()

# Dropping numerical object columns
X = X.select_dtypes(exclude="object")
features_name = X.columns

print('✅')

# Splitting dataset on train and test for Random Forest
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=42)

# Instanciating and fitting Random Forest
print(f'''{5*"#"} Fitting Random Forest Classifier... ⏳ {5*"#"}''')

rf = RandomForestClassifier(random_state=0)
rf.fit(X_train, y_train)

print('✅')

# Feature importance based on mean
print(f'''{5*"#"} Calculating features importances based on mean... ⏳ {5*"#"}''')

importances = rf.feature_importances_
std = np.std([tree.feature_importances_ for tree in rf.estimators_], axis=0)

# Creating df based on features importances
importances_df = pd.DataFrame(importances, index=features_name)
sorted_importances_df = importances_df.sort_values(by=0, ascending=False) # Sorting values

print('✅')

# Feature importance based on permutation
print(f'''{5*"#"} Calculating features importances based on permutation... ⏳ {5*"#"}''')

permutation_result = permutation_importance(
    rf,
    X_test, y_test,
    n_repeats=10,
    random_state=42,
    n_jobs=-1)

# Creating df based on permutation importances mean
permutation_importance_df = pd.DataFrame(permutation_result.importances_mean, index=features_name)
sorted_permutation_importance_df = permutation_importance_df.sort_values(by=0, ascending=False) # Sorting values

print('✅')

####################  Selecting Features  ####################

optimal_features = list(feature for feature in sorted_importances_df.head(7).index)
optimal_features.extend(feature for feature in sorted_permutation_importance_df.head(2).index if feature not in optimal_features)

################ Final output ################

# Final output of the file
# Baseline model with MinMax scaler:
#   - Accuracy average: 0.94
#   - Precision average: 0.9859
optimal_features
print(f'''{5*"#"} Optimal features successfully selected ✅ {5*"#"}
''')
