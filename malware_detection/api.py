from fastapi import FastAPI, File, UploadFile, HTTPException
import pefile
import pandas as pd
import joblib
import io
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score


# Loading joblib file
preproc_pipe = joblib.load('models/preproc_pipe.pkl')
model = joblib.load('models/malware_detection_v1.pkl')

# Defining function for metadata retrieval
def get_version_information(pe):
    try:
        for fileinfo in pe.FileInfo:
            if fileinfo.Key == b'StringFileInfo':
                for st in fileinfo.StringTable:
                    for entry in st.entries.items():
                        if entry[0] == b'FileVersion':
                            return len(entry[1])
    except AttributeError:
        return 0

# Declaring app name
malware_detector=FastAPI()

# Define app root endpoint
@malware_detector.get('/')
def index():
	return {'Project name': 'Malware detector',
	    	'Description': 'Malware detection model to flag potential malware files on given files descriptions'}

# Define health checkpoint
@malware_detector.get('/health')
def health():
	return {'Model working': 'Yes'}

# Define model score endpoint
@malware_detector.post('/model-score')
async def model_score():
	# Return model score and precision

	# Getting data as a CSV
	data = pd.read_csv("raw_data/MalwareData.csv", sep="|")

	# Assigning X and y
	X = data.drop(columns="legitimate").copy()
	y = data['legitimate'].copy()

	# Splitting data set
	_, X_test, _, y_test = train_test_split(X, y, test_size=.2, random_state=42)

	# Calculating scores
	y_pred = model.predict(X_test)
	precision = precision_score(y_true=y_test, y_pred=y_pred)
	score = model.score(X_test, y_test)
	return {'Model score': round(score, 4),
	    	'Model precision': round(precision, 4)}

# Define prediction endpoint
@malware_detector.post('/predict')
async def model_predict(file: UploadFile = File(...)):
	try:
		# Read the file content in memory
		content = await file.read()
		pe = pefile.PE(data=content)

		# Extract metadata
		metadata = {
			'ImageBase': pe.OPTIONAL_HEADER.ImageBase,
			'SizeOfStackReserve': pe.OPTIONAL_HEADER.SizeOfStackReserve,
			'VersionInformationSize': get_version_information(pe),
			'ResourcesMinSize': len(pe.DIRECTORY_ENTRY_RESOURCE.entries) if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE') else 0,
			'ExportNb': len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') else 0,
			'MinorImageVersion': pe.OPTIONAL_HEADER.MinorImageVersion,
			'Characteristics': pe.FILE_HEADER.Characteristics,
			'Subsystem': pe.OPTIONAL_HEADER.Subsystem
			}

	        # Preprocess the metadata
		metadata_df = pd.DataFrame([metadata])
		preprocessed_metadata = preproc_pipe.transform(metadata_df)

		# Make prediction
		prediction = model.predict(preprocessed_metadata)

	except Exception as e:
        	raise HTTPException(status_code=400, detail=f"Error processing file: {str(e)}")

	return {"Result interpretation": "1 is legitimate | 0 is malware", 
		"prediction": prediction.tolist()}
