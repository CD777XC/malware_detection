from fastapi import FastAPI
import joblib
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score

# Declaring app name
malware_detector=FastAPI()

# Define app root endpoint
@malware_detector.get('/')
def index():
	return {'Project name': 'Malware detector',
	    	'Description': 'Malware detection model to flag potential malware files on given files descriptions'}

# Define health checkpoint
@malware_detector.get('/health')
def health():
	return {'Model working': 'Yes'}

# Define model score endpoint
@malware_detector.post('/model-score')
async def model_score():
	# Return model score and precision

	# Getting data as a CSV
	data = pd.read_csv("raw_data/MalwareData.csv", sep="|")

	# Assigning X and y
	X = data.drop(columns="legitimate").copy()
	y = data['legitimate'].copy()

	# Splitting data set
	_, X_test, _, y_test = train_test_split(X, y, test_size=.2, random_state=42)

	# Loading joblib file
	model = joblib.load('models/malware_detection_v1.pkl')

	# Calculating scores
	y_pred = model.predict(X_test)
	precision = precision_score(y_true=y_test, y_pred=y_pred)
	score = model.score(X_test, y_test)
	return {'Model score': round(score, 4),
	    	'Model precision': round(precision, 4)}

# Define prediction endpoint
#@malware_detector.post('/predict')
#async def model_predict():

